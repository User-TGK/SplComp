// (Very slow) brainfuck interpreter in SPL
// By: Jochem Raat, June 2020

[Int] cells = [];
var size = 100;
var pos = 0;
[Char] program =
  // hello world:
   '+':'+':'+':'+':'+':'+':'+':'+':'[':'>':'+':'+':'+':'+':'[':'>':'+':'+':'>':'+':'+':'+':'>':'+':'+':'+':'>':'+':'<':'<':'<':'<':'-':']':'>':'+':'>':'+':'>':'-':'>':'>':'+':'[':'<':']':'<':'-':']':'>':'>':'.':'>':'-':'-':'-':'.':'+':'+':'+':'+':'+':'+':'+':'.':'.':'+':'+':'+':'.':'>':'>':'.':'<':'-':'.':'<':'.':'+':'+':'+':'.':'-':'-':'-':'-':'-':'-':'.':'-':'-':'-':'-':'-':'-':'-':'-':'.':'>':'>':'+':'.':'>':'+':'+':'.':[];
  // squares:

var program_pos = 0;

main() :: -> Void {
  cells = init(size);
  execute(program);
}

// Get the current cell:
get_current() :: -> [Int] {
  var tmp = pos;
  var cell = cells;

  while (tmp > 0) {
    cell = cell.tl;
    tmp = tmp - 1;
  }

  return cell;
}

// Get the command at position `i` in the program:
get_at(prog, i) :: [Char] Int -> Char {
  var tmp = i;
  var p = prog;

  while (tmp > 0) {
    p = p.tl;
    tmp = tmp - 1;
  }

  return p.hd;
}

// Search left for the matching opening brace:
search_left() :: -> Void {
  var depth = 1;
  var cur = '0';

  program_pos = program_pos - 1;
  while (depth > 0) {
    cur = get_at(program, program_pos);

    if (cur == ']') {
      depth = depth + 1;
    } else {
      if (cur == '[') {
        depth = depth - 1;
      } else {

      }
    }

    program_pos = program_pos - 1;
  }
  program_pos = program_pos + 1;
}

// Search right for the matching closing brace:
search_right() :: -> Void {
  var depth = 1;
  var cur = '0';

  program_pos = program_pos + 1;
  while (depth > 0) {
    cur = get_at(program, program_pos);

    if (cur == '[') {
      depth = depth + 1;
    } else {
      if (cur == ']') {
        depth = depth - 1;
      } else {

      }
    }

    program_pos = program_pos + 1;
  }
  program_pos = program_pos - 1;
}

// Execute a brainfuck program:
execute(prog) :: [Char] -> Void {
  var head = prog.hd;
  [Int] current = [];

  while (pos < 1000) {
    head = get_at(program, program_pos);
    current = get_current();

    if (head == '+') {
      current.hd = (current.hd + 1) % 256;
    } else {
      if (head == '-') {
        current.hd = (current.hd - 1) % 256;
      } else {
        if (head == '>') {
          pos = pos + 1;
        } else {
          if (head == '<') {
            pos = pos - 1;
          } else {
            if (head == '[') {
              if (current.hd == 0) {
                search_right();
              } else {

              }
            } else {
              if (head == ']') {
                if (current.hd == 0) {

                } else {
                  search_left();
                }
              } else {
                if (head == '.') {
                  // ATTENTION: there is no SPL-standard way to convert
                  // an Int to a Char. For correct brainfuck
                  // behaviour, we should convert the current cell
                  // value to a Char and print it as that:
                  print(current.hd);
                } else {

                }
              }
            }
          }
        }
      }
    }
    program_pos = program_pos + 1;
  }
}

// Initialize `s` cells to 0:
init(s) :: Int -> [Int] {
  [Int] list = [];

  while (s > 0) {
    list = 0 : list;
    s = s - 1;
  }
  return list;
}
